/* Generated By:JavaCC: Do not edit this line. ExprParser.java */
package ptolemy.exprparser;

import java.io.BufferedReader;
import java.io.StringReader;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

public class ExprParser implements ExprParserConstants {
        private Map<String, Double> variables = new HashMap<String, Double>();
        private Node lastAST = null;

        public void setVar(String varName, double value) {
                variables.put(varName, value);
        }

        public void unsetVar(String varName) {
                variables.remove(varName);
        }

        public boolean isSetVar(String varName) {
                return variables.containsKey(varName);
        }

        public double getVar(String varName) throws NoSuchElementException {
                if(!isSetVar(varName)) throw new NoSuchElementException(varName);
                return variables.get(varName).doubleValue();
        }

        public abstract class Node {
                public abstract double eval();

                public abstract void dumpTree(String prefix);
        }

        public class Number extends Node {
                private double value;

                public Number(double v) {
                        value = v;
                }

                public String toString() {
                        return "" + value;
                }

                public double eval() {
                        return value;
                }

                public void dumpTree(String prefix) {
                        System.out.println(prefix + toString());
                }
        }

        public class Variable extends Node {
                private String name;

                public Variable(String n) throws ParseException {
                        name = n;
                }

                public String toString() {
                        return name;
                }

                public double eval() {
                        try {
                                return getVar(name);
                        } catch(NoSuchElementException e) {
                                throw new RuntimeException("No such variable: " + name);
                        }
                }

                public void dumpTree(String prefix) {
                        System.out.println(prefix + toString());
                }
        }

        public class Parens extends Node {
                private Node subnode;

                public Parens(Node n) {
                        subnode = n;
                }

                public String toString() {
                        return "(" + subnode + ")";
                }

                public double eval() {
                        return subnode.eval();
                }

                public void dumpTree(String prefix) {
                        System.out.println(prefix + "(...)");
                        subnode.dumpTree(prefix + "  ");
                }
        }

        public class Function1 extends Node {
                private String name;
                private Node argument;
                private Method mathMethod;

                public Function1(String n, Node arg) throws ParseException {
                        name = n;
                        argument = arg;

                        try {
                                Class<Math> c = Math.class;
                                mathMethod = c.getMethod(name, new Class[]{Double.TYPE});

                                ((Double) mathMethod.invoke(null, 0.5)).doubleValue();
                        } catch(NoSuchMethodException e) {
                                throw new ParseException("No such function: " + name + "()/1");
                        } catch(IllegalAccessException e) {
                                throw new ParseException(e.toString());
                        } catch(InvocationTargetException e) {
                                throw new ParseException(e.toString());
                        }
                }

                public String toString() {
                        return name + "(" + argument + ")";
                }

                public double eval() {
                        double arg = argument.eval();
                        try {
                                return ((Double) mathMethod.invoke(null, arg)).doubleValue();
                        } catch(IllegalAccessException e) {
                                return 0;
                        } catch(InvocationTargetException e) {
                                return 0;
                        }
                }

                public void dumpTree(String prefix) {
                        System.out.println(prefix + name + "(...)");
                        argument.dumpTree(prefix + "  ");
                }
        }

        public static enum UnaryOpType {NEG}

        public class UnaryOp extends Node {
                private UnaryOpType type;
                private Node operand;

                public UnaryOp(UnaryOpType t, Node o) {
                        type = t;
                        operand = o;
                }

                private String opString() {
                        switch(type) {
                        case NEG: return "-";
                        }
                        return "?";
                }

                public String toString() {
                        return opString() + operand;
                }

                public double eval() {
                        switch(type) {
                        case NEG: return -operand.eval();
                        }
                        return 0;
                }

                public void dumpTree(String prefix) {
                        System.out.println(prefix + opString());
                        operand.dumpTree(prefix + "  ");
                }
        }

        public static enum BinaryOpType {PLUS, MINUS, MULT, DIV, POW}

        public class BinaryOp extends Node {
                private BinaryOpType type;
                private Node left, right;

                public BinaryOp(BinaryOpType t, Node l, Node r) {
                        type = t;
                        left = l;
                        right = r;
                }

                private String opString() {
                        switch(type) {
                        case PLUS: return "+";
                        case MINUS: return "-";
                        case MULT: return "*";
                        case DIV: return "/";
                        case POW: return "^";
                        }
                        return "?";
                }

                public String toString() {
                        return left + opString() + right;
                }

                public double eval() {
                        switch(type) {
                        case PLUS: return left.eval() + right.eval();
                        case MINUS: return left.eval() - right.eval();
                        case MULT: return left.eval() * right.eval();
                        case DIV: return left.eval() / right.eval();
                        case POW: return Math.pow(left.eval(), right.eval());
                        }
                        return 0;
                }

                public void dumpTree(String prefix) {
                        System.out.println(prefix + opString());
                        left.dumpTree(prefix + "  ");
                        right.dumpTree(prefix + "  ");
                }
        }

        // convenience methods:

        public void parse() throws ParseException {
                lastAST = S();
        }

        public double eval() {
                if(lastAST == null)
                        throw new RuntimeException("No AST found. (forgot to call parse()?)");
                else
                        return lastAST.eval();
        }

        public void dumpTree() {
                if(lastAST == null)
                        throw new RuntimeException("No AST found. (forgot to call parse()?)");
                else
                        lastAST.dumpTree("");
        }

        public static ExprParser parseString(String s) throws ParseException {
                ExprParser p = new ExprParser(new BufferedReader(new StringReader(s)));
                p.parse();
                return p;
        }

  final public Node S() throws ParseException {
            Node r;
    r = E();
    jj_consume_token(0);
                       {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Node E() throws ParseException {
            Node v1, r;
    v1 = T();
    r = e(v1);
                            {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Node e(Node v1) throws ParseException {
                   Node v2, v3, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      v2 = T();
                         v3 = new BinaryOp(BinaryOpType.PLUS, v1, v2);
      r = e(v3);
                                                                                   {if (true) return r;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      v2 = T();
                          v3 = new BinaryOp(BinaryOpType.MINUS, v1, v2);
      r = e(v3);
                                                                                     {if (true) return r;}
      break;
    default:
      jj_la1[0] = jj_gen;
         {if (true) return v1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node T() throws ParseException {
            Node v1, r;
    v1 = U();
    r = t(v1);
                            {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Node t(Node v1) throws ParseException {
                   Node v2, v3, r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      v2 = U();
                         v3 = new BinaryOp(BinaryOpType.MULT, v1, v2);
      r = t(v3);
                                                                                   {if (true) return r;}
      break;
    case DIV:
      jj_consume_token(DIV);
      v2 = U();
                         v3 = new BinaryOp(BinaryOpType.DIV, v1, v2);
      r = t(v3);
                                                                                  {if (true) return r;}
      break;
    default:
      jj_la1[1] = jj_gen;
         {if (true) return v1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node U() throws ParseException {
            Node r;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case PAROP:
    case ID:
      r = F();
                 {if (true) return r;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      r = F();
                         {if (true) return new UnaryOp(UnaryOpType.NEG, r);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node F() throws ParseException {
            Node v1, r;
    v1 = P();
    r = p(v1);
                            {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Node p(Node v1) throws ParseException {
                   Node v2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POW:
      jj_consume_token(POW);
      v2 = F();
                        {if (true) return new BinaryOp(BinaryOpType.POW, v1, v2);}
      break;
    default:
      jj_la1[3] = jj_gen;
         {if (true) return v1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node P() throws ParseException {
            Node r; Token n, f, v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAROP:
      jj_consume_token(PAROP);
      r = E();
      jj_consume_token(PARCL);
                                 {if (true) return new Parens(r);}
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2147483647)) {
        f = jj_consume_token(ID);
        jj_consume_token(PAROP);
        r = E();
        jj_consume_token(PARCL);
                                                                  {if (true) return new Function1(f.image, r);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          n = jj_consume_token(NUM);
                   {if (true) return new Number(Double.parseDouble(n.image));}
          break;
        case ID:
          v = jj_consume_token(ID);
                  {if (true) return new Variable(v.image);}
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PAROP)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ExprParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0x300,0x24a0,0x1000,0x400,0x2020,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExprParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExprParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ExprParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ExprParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ExprParser(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ExprParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
